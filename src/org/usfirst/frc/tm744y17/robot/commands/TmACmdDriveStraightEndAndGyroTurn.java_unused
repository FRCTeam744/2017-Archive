/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.usfirst.frc.tm744y17.robot.commands;


import org.usfirst.frc.tm744y17.robot.devices.TmRobotDriveSixMotors;
import org.usfirst.frc.tm744y17.robot.devices.TmRobotDriveSixMotors.CenterDriveMotorsBehaviorE;
import org.usfirst.frc.tm744y17.robot.helpers.TmToolsI.P;
import org.usfirst.frc.tm744y17.robot.subsystems.TmSsDriveTrain;
import org.usfirst.frc.tm744y17.robot.subsystems.TmSsDriveTrain.DrvEncoderMgmt;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;

/**
 * P-controlled driving of the robot during autonomous, using encoders and gyro.
 * 
 * TUNING K:
 * If robot is moving in wrong direction, multiply by -1
 * If robot is overshooting and/or oscillating about point, lower K
 * If robot is not reaching point and not ending the Command, increase K
 * 
 * @author Jonathan
 */
public class TmACmdDriveStraightEndAndGyroTurn extends Command {
    
    DriverStation m_ds = DriverStation.getInstance();
    DrvEncoderMgmt m_dem;
    TmSsDriveTrain ssDrive;
    TmRobotDriveSixMotors chassis;
    private double distance;
    private double angle;
    private double error;
    private double theta;
    private double pCorrection;
    private double angleCorrection;
    private String descr;
    
    private static double maxMotorSpeed = 0.5; //TUNE
    private static double minMotorSpeed = 0.1;
    
    private static final double pK = -.3; //TUNE! 
    private static final double thetaK = 0.05;
    
    public TmACmdDriveStraightEndAndGyroTurn(double distance, double speed, double angle) {
    	this(distance, speed, angle, 7.0);
    }
    public TmACmdDriveStraightEndAndGyroTurn(double distance, double speed, double angle, double timeoutSecs) {
    	ssDrive = TmSsDriveTrain.getInstance();
    	chassis = ssDrive.getChassisInstance();
    	m_dem = ssDrive.getDriveEncoderMgmtInstance();
//        setTimeout(Math.abs(distance)*.4);
    	setTimeout(timeoutSecs);
        requires(ssDrive);
        this.distance = distance;
        this.angle = angle;
        maxMotorSpeed = speed;
        descr = String.format("initializing TmACmdDriveStraightEndAndGyroTurn(dist=%1.3f, spd=%1.3f, angle=%1.3f, timeout=%1.3f secs)",
        		distance, speed, angle, timeoutSecs);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	P.println(descr);
        ssDrive.resetEncoders();
        ssDrive.resetGyro();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	m_dem.update();
        error = distance - m_dem.getAverageDistance();
        theta = angle - ssDrive.getAngle();
        pCorrection = (error * pK);
        angleCorrection = (theta * thetaK);
//        if(angleCorrection < 0){
//        	chassis.setRobotLeftRightSpeeds(-clamp(getCorrections() + angleCorrection), 
//        			clamp(getCorrections()), CenterDriveMotorsBehaviorE.COAST_DURING_SPINS);
//        } else {
//        	chassis.setRobotLeftRightSpeeds(-clamp(getCorrections()), 
//        			clamp(getCorrections() + angleCorrection), CenterDriveMotorsBehaviorE.COAST_DURING_SPINS);
//        }
        if(angleCorrection < 0){
        	chassis.setRobotLeftRightSpeeds(clamp(getCorrections() + angleCorrection), 
        			clamp(getCorrections()), CenterDriveMotorsBehaviorE.COAST_DURING_SPINS);
        } else {
        	chassis.setRobotLeftRightSpeeds(clamp(getCorrections()), 
        			clamp(getCorrections() + angleCorrection), CenterDriveMotorsBehaviorE.COAST_DURING_SPINS);
        }
    }
    
    protected double getCorrections() {
    	return (pCorrection);
    }
    
    private double clamp(double value) {
       if(value > maxMotorSpeed) return maxMotorSpeed;
       else if(minMotorSpeed > value && value > 0.0) return minMotorSpeed;
       else if(0.0 > value && value > -minMotorSpeed) return -minMotorSpeed;
       else if(value < -maxMotorSpeed) return -maxMotorSpeed;
       else return value;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //return when an inch away or autonomous ends
       return Math.abs(error) < (1.0 / 12) || isTimedOut(); 
    }

    // Called once after isFinished returns true
    protected void end() {
        ssDrive.stopMotors();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        ssDrive.stopMotors();
    }
}
